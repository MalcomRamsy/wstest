CLIENT>JS

// public/client.js
document.addEventListener('DOMContentLoaded', () => {
    const socket = io();

    const storedUsername = localStorage.getItem('username');
    if (storedUsername) {
        document.getElementById('usernameInput').value = storedUsername;
        socket.emit('setUsername', storedUsername); // Emit stored username to include device user in the count
    }

    document.getElementById('usernameForm').addEventListener('submit', (e) => {
        e.preventDefault();
        const username = document.getElementById('usernameInput').value.trim();
        if (username !== '') {
            socket.emit('setUsername', username);
            localStorage.setItem('username', username); // Save username to localStorage
            document.getElementById('usernameInput').value = ''; // Clear the input field
        }
    });

    socket.on('userConnected', ({ username, totalUsers }) => {
        addUserToList(username);
        document.getElementById('totalUsers').textContent = totalUsers;
    });

    socket.on('userDisconnected', ({ username, totalUsers, disconnectedAt }) => {
        removeUserFromList(username);
        document.getElementById('totalUsers').textContent = totalUsers;
        displayDisconnectTime(username, disconnectedAt);
        displayDisconnectionMessage(username);
    });

    socket.on('online', ({ totalUsers }) => {
        document.getElementById('totalUsers').textContent = totalUsers;
    });

    function addUserToList(username) {
        const userList = document.getElementById('userList');
        const listItem = document.createElement('li');
        listItem.textContent = username;
        listItem.setAttribute('id', username); // Set id to username
        userList.appendChild(listItem);
    }

    function removeUserFromList(username) {
        const userToRemove = document.getElementById(username);
        if (userToRemove) {
            userToRemove.remove();
        }
    }

    function displayDisconnectTime(username, disconnectedAt) {
        const userList = document.getElementById('userList');
        const userElement = document.getElementById(username);
        if (userElement) {
            const disconnectTimeElement = document.createElement('span');
            disconnectTimeElement.textContent = ` (Disconnected at ${new Date(disconnectedAt).toLocaleString()})`;
            userElement.appendChild(disconnectTimeElement);
        }
    }

    function displayDisconnectionMessage(username) {
        const messageContainer = document.getElementById('messageContainer');
        const messageElement = document.createElement('p');
        messageElement.textContent = `${username} has disconnected.`;
        messageContainer.appendChild(messageElement);
    }
});


// styles.css
/* public/style.css */

/* Reset default browser styles */
body, ul {
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f5f5f5;
    color: #333;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

h1 {
    margin-bottom: 20px;
}

.chat-container {
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    width: 400px;
    max-width: 90%;
}

.user-list {
    list-style-type: none;
    padding: 0;
}

.user-list li {
    margin-bottom: 5px;
}

#usernameInput {
    width: 70%;
    padding: 10px;
    font-size: 16px;
    border: 2px solid #ddd;
    border-radius: 5px;
    margin-right: 10px;
}

#usernameInput:focus {
    outline: none;
    border-color: #66afe9;
}

button {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

button:hover {
    background-color: #45a049;
}

input[type="text"]::placeholder {
    color: #aaa;
}

#totalUsers {
    font-weight: bold;
    font-size: 18px;
    color: #888;
}













SERVER.JS

// server.js
const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const path = require('path');

const PORT = process.env.PORT || 3000;

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

let onlineUsers = new Set();

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

io.on('connection', (socket) => {
    console.log('a user connected');

    socket.on('setUsername', (username) => {
        onlineUsers.add(username);
        io.emit('userConnected', { username, totalUsers: onlineUsers.size });
        socket.emit('online', { totalUsers: onlineUsers.size }); // Emit total users to the client
        socket.username = username; // Store username in socket object
        console.log(`${username} connected`);
    });

    socket.on('disconnect', () => {
        const user = socket.username;
        if (user && onlineUsers.has(user)) {
            onlineUsers.delete(user);
            io.emit('userDisconnected', { username: user, totalUsers: onlineUsers.size, disconnectedAt: new Date() });
            console.log(`${user} disconnected`);
        }
    });
});

server.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});




INDEX.HTML
    <body>
        <h1>Connect</h1>
        <form id="usernameForm">
            <input type="text" id="usernameInput" placeholder="Enter your username">
            <button type="submit">Set Username</button>
        </form>
        <p style="width: 10px; height: 10px; background: green;"> <span id="totalUsers">0</span></p>
        <h2>Connected Users:</h2>
        <ul id="userList"></ul>
    
        <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.3/socket.io.js"></script>
        <script src="client.js"></script> <!-- Make sure client.js is included here -->
    </body>
    

